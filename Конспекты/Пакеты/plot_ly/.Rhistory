size = 2
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 200
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 200
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 3
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 0.1
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
size = 0.1
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 0.1
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 0.1
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
size = 0.1
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = 0,
end = 3,
size = 0.1
)
)
plot_ly(
x = ~rnorm(200),
type = "histogram",
xbins = list(
start = -5,
end = 3,
size = 0.1
)
)
s <- matrix(c(1, -.75, -.75, 1), ncol = 2)
obs <- mvtnorm::rmvnorm(500, sigma = s)
p <- plot_ly(x = obs[,1], y = obs[,2])
library(plotly)
s <- matrix(c(1, -.75, -.75, 1), ncol = 2)
obs <- mvtnorm::rmvnorm(500, sigma = s)
p <- plot_ly(x = obs[,1], y = obs[,2])
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d()
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(colorscale = "Blue")
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent"
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinx = 30,
nbiny = 30
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinx = 30,
nbiny = 30
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 30,
nbinsy = 30
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
#nbinsx = 30,
#nbinsy = 30,
xbins = list(
size = 0.1
)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]",
histnorm = "percent", #"density" | "probability
nbinsx = 30,
nbinsy = 30
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "[[0, 'rgb(0,0,255)', [1, 'rgb(255,255,0)']]",
histnorm = "percent", #"density" | "probability
nbinsx = 30,
nbinsy = 30
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "[[0, 'rgb(0,0,255)', [1, 'rgb(255,255,255)']]",
histnorm = "percent", #"density" | "probability
nbinsx = 30,
nbinsy = 30
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 30,
nbinsy = 30
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 30,
nbinsy = 30
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10,
nbinsy = 10
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10,
nbinsy = 20
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
library(plotly)
library(plyr)
# read in Walmart data
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv")
# first plot - bar chart
total <- count(df$YEAR)
fit <- fitted(loess(total$freq ~ total$x))
p2 <- plot_ly(data = total, x = ~x, y = ~freq, type = "bar", showlegend=FALSE,
marker=list(color=~x, showscale=FALSE)) %>%
add_lines(y = fit, showlegend=FALSE, color = 'black') %>%
layout(showlegend=FALSE, xaxis = list(side="right", showgrid=FALSE),
yaxis=list(showgrid=FALSE))
# second plot - scattergeo map
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
p3 <- plot_geo(df, lat = ~LAT, lon = ~LON) %>%
add_markers(
text = ~OPENDATE, showlegend=FALSE,
marker=list(color = ~YEAR, showscale=FALSE),
hoverinfo = "text") %>%
layout(geo = g, showlegend=FALSE)
# third plot - 3D mesh
#install.packages("rgl")
#install.packages("RTriangle")
#install.packages("graticule")
#devtools::install_github("r-gris/rangl", force=TRUE)
library(rangl)
library(maptools)
data(wrld_simpl)
## max area in native units of the map data
## globe() just reprojects to geocent, but stores in rangl's normal way (objects, primitives, vertices)
mesh <- plot(globe(rangl(subset(wrld_simpl), max_area = 0.5)))
# plot point cloud
x <- mesh$vb[1,]
y <- mesh$vb[2,]
z <- mesh$vb[3,]
m <- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c("x","y","z")))
# colours in z don't make sense here, need to map object aesthetics above
zmean <- apply(t(mesh$it),MARGIN=1,function(row){mean(m[row,3])})
library(scales)
facecolor = colour_ramp(
brewer_pal(palette="OrRd")(9)
)(rescale(x=zmean))
p1 <- plot_ly(
x = x, y = y, z = z,
i = mesh$it[1,]-1, j = mesh$it[2,]-1, k = mesh$it[3,]-1,
facecolor = facecolor,
type = "mesh3d"
)
# subplot
p <- subplot(p1, p2, p3, nrows = 2) %>%
layout(title = "Walmart Store Openings by Year",
xaxis = list(domain=list(x=c(0,0.5),y=c(0,0.5))),
scene = list(domain=list(x=c(0.5,1),y=c(0,0.5))),
xaxis2 = list(domain=list(x=c(0.5,1),y=c(0.5,1))),
showlegend=FALSE,showlegend2=FALSE)
library(plotly)
library(plyr)
# read in Walmart data
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/1962_2006_walmart_store_openings.csv")
# first plot - bar chart
total <- count(df$YEAR)
fit <- fitted(loess(total$freq ~ total$x))
p2 <- plot_ly(data = total, x = ~x, y = ~freq, type = "bar", showlegend=FALSE,
marker=list(color=~x, showscale=FALSE)) %>%
add_lines(y = fit, showlegend=FALSE, color = 'black') %>%
layout(showlegend=FALSE, xaxis = list(side="right", showgrid=FALSE),
yaxis=list(showgrid=FALSE))
# second plot - scattergeo map
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white'))
p3 <- plot_geo(df, lat = ~LAT, lon = ~LON) %>%
add_markers(
text = ~OPENDATE, showlegend=FALSE,
marker=list(color = ~YEAR, showscale=FALSE),
hoverinfo = "text") %>%
layout(geo = g, showlegend=FALSE)
# third plot - 3D mesh
#install.packages("rgl")
#install.packages("RTriangle")
#install.packages("graticule")
#devtools::install_github("r-gris/rangl", force=TRUE)
library(rangl)
library(maptools)
data(wrld_simpl)
## max area in native units of the map data
## globe() just reprojects to geocent, but stores in rangl's normal way (objects, primitives, vertices)
mesh <- plot(globe(rangl(subset(wrld_simpl), max_area = 0.5)))
# plot point cloud
x <- mesh$vb[1,]
y <- mesh$vb[2,]
z <- mesh$vb[3,]
m <- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c("x","y","z")))
# colours in z don't make sense here, need to map object aesthetics above
zmean <- apply(t(mesh$it),MARGIN=1,function(row){mean(m[row,3])})
library(scales)
facecolor = colour_ramp(
brewer_pal(palette="OrRd")(9)
)(rescale(x=zmean))
p1 <- plot_ly(
x = x, y = y, z = z,
i = mesh$it[1,]-1, j = mesh$it[2,]-1, k = mesh$it[3,]-1,
facecolor = facecolor,
type = "mesh3d"
)
# subplot
p <- subplot(p1, p2, p3, nrows = 2) %>%
layout(title = "Walmart Store Openings by Year",
xaxis = list(domain=list(x=c(0,0.5),y=c(0,0.5))),
scene = list(domain=list(x=c(0.5,1),y=c(0,0.5))),
xaxis2 = list(domain=list(x=c(0.5,1),y=c(0.5,1))),
showlegend=FALSE,showlegend2=FALSE)
p1 <- plot_ly(economics, x = ~date, y = ~unemploy) %>%
add_lines(name = ~"unemploy")
p2 <- plot_ly(economics, x = ~date, y = ~uempmed) %>%
add_lines(name = ~"uempmed")
p <- subplot(p1, p2)
subplot(p1, p2)
plotList <- function(nplots) {
lapply(seq_len(nplots), function(x) plot_ly())
}
subplot(plotList(6), nrows = 2, shareX = TRUE, shareY = TRUE)
s2 <- subplot(plotList(2), shareY = TRUE)
subplot(plotList(2), shareY = TRUE)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
library(plotly)
s <- matrix(c(1, -.75, -.75, 1), ncol = 2)
obs <- mvtnorm::rmvnorm(500, sigma = s)
p <- plot_ly(x = obs[,1], y = obs[,2])
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
)
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
) %>% layout(sliders = list(list(active = 3,
currentvalue = list(prefix = "Frequency: "),
steps = steps)))
)
subplot(
p %>% add_markers(alpha = 0.2),
p %>% add_histogram2d(
colorscale = "Blue",
histnorm = "percent", #"density" | "probability
nbinsx = 10
#xbins = list(
#start, end, size
#)
#ybins = list(
#start, end, size
#)
) %>% layout(sliders = list(list(active = 3,
currentvalue = list(prefix = "Frequency: "),
steps = c(1,2,3))))
)
library(plotly)
plot_ly(
type = 'scatter',
mode='markers',
y=rep(5, 40),
marker=list(
size=seq(0, 39),
color=seq(0, 39),
colorbar=list(
title='Colorbar'
),
colorscale='Viridis',
reversescale =T
)
) %>%
layout(
xaxis = list(
showgrid = F,
zeroline = F
),
yaxis = list(
showgrid = F,
zeroline = F
)
)
plot_ly(
type = 'scatter',
mode='markers',
y=rep(5, 40),
marker=list(
size=seq(0, 39),
color=seq(0, 39),
colorbar=list(
title='Colorbar'
),
colorscale='Blue',
reversescale =T
)
) %>%
layout(
xaxis = list(
showgrid = F,
zeroline = F
),
yaxis = list(
showgrid = F,
zeroline = F
)
)
